#define ENABLE_INPUT_FROM_FILES

.number_type ArgIndex    // Index used to qualify block arguments
.symbol_type Transfer    // ID of a transfer between blocks
.symbol_type Name        // Name associated to an object
.symbol_type SSA         // ID of a statement or block argument and its value
.symbol_type Block       // ID of a basic block

// -- input relations --

// Entry block for a function
.decl function(id_block: Block, name: Name)

// All statements
.decl statement(id: SSA)

// All blocks
.decl block(id_block: Block)

// Associates blocks to contained statements
.decl blockStmt(id_block: Block, id_stmt: SSA)

// An input argument to a block
.decl argument(id_arg: SSA,
               id_block: Block,
               index: ArgIndex)

// Follows relation over statements within single blocks
.decl follows(id_next: SSA, id_prev: SSA)

.decl assign(id: SSA, var_id: SSA)                      // Assignments from var_id to id
.decl const(id: SSA, value: symbol)                     // Constants
.decl uop(id: SSA, id_var: SSA, op: Name)               // Unary operations
.decl bop(id: SSA, id_lhs: SSA, id_rhs: SSA, op: Name)  // Binary operations

.decl load(id: SSA, field: Name)                        // Storage field read
.decl store(id: SSA, field: Name, var_id: SSA)          // Storage field write

// Member access (e.g. msg.sender)
.decl structLoad(id: SSA, id_struct: SSA, field: Name)

// Member access (e.g. someStruct.value = x, not relevant for the project)
.decl structStore(id: SSA, id_struct: SSA, field: Name, id_var: SSA)

// Goto transfer with id `id_transfer` from `id_block_from` to `id_block_to`
.decl goto(id_transfer: Transfer,
           id_block_from: Block,
           id_block_to: Block)

// Conditional branching (think of two Goto's for each true/false branch)
.decl branch(id_transfer_true: Transfer,
             id_transfer_false: Transfer,
             id_block_from: Block,
             id_block_true: Block,
             id_block_false: Block,
             var_cond_id: SSA)  // `var_cond_id` references the condition

// Jump from a block `id_block_from` to a different function with entry block
// `id_block_to` (i.e. a function call). The called function returns to the
// continuation block `id_continuation` of the caller function via return
// transfers.
.decl jump(id_transfer: Transfer,
           id_block_from: Block,
           id_block_to: Block,
           id_continuation: Block)

// Return transfer (note there is no target block; if needed, this can be
// inferred at call sites via the `id_continuation` of the jump transfer).
.decl return(id_transfer: Transfer, id_block_from: Block)

// List of arguments passed in a transfer
.decl transferArgument(id_transfer: Transfer, id_argument_value: SSA, index: ArgIndex)

// Ignore these...
//.decl arrayStore(id: SSA, id_array: SSA, id_index: SSA, id_var: SSA)
//.decl mapStore(id: SSA, id_map: SSA, id_key: SSA, id_var: SSA)
//.decl arrayLoad(id: SSA, id_array: SSA, id_index: SSA)
//.decl mapLoad(id: SSA, id_map: SSA, id_key: SSA)
//.decl call(id_transfer: Transfer, id_block_from: Block, id_block_to: Block, id_continuation: Block)
//.decl unknownBlock(id_block: Block)
.decl selfdestruct(id: SSA, address: SSA)
.decl revert(id_transfer: Transfer, id_block: Block)
.decl builtinVariable(id: SSA, name: symbol)

#ifdef ENABLE_INPUT_FROM_FILES
.input function
.input block
.input blockStmt
.input follows
.input argument
.input statement
.input assign
.input const
.input uop
.input bop
.input load
.input structLoad
.input store
.input structStore
.input goto
.input branch
.input return
.input jump
.input transferArgument
.input selfdestruct
.input revert
.input builtinVariable
// Ignore these...
//.input arrayLoad
//.input mapLoad
//.input arrayStore
//.input mapStore
//.input call
//.input unknownBlock
#endif


// Helper relations
.decl msgSender(id: SSA)
msgSender(id) :- builtinVariable(id, "SENDER").

// -- output relations --
.decl tainted_sinks(id: SSA)

// Your code goes here...

.decl blockFollows(id_block_from: Block, id_block_to: Block)
// There is a follows relation b/w blocks in case of 1: goto 2: branch 3: jump 
blockFollows(id_block_from, id_block_to) :- goto(_, id_block_from, id_block_to).
blockFollows(id_block_from, id_block_to) :-  branch(_, _, id_block_from, id_block_to, _, _); 
                                             branch(_, _, id_block_from, _, id_block_to, _).
blockFollows(id_block_from, id_block_to) :- jump(_,id_block_from, id_block_to,_); 
                                            jump(_,_,id_block_from, id_block_to). 

// Transitive closure (blockFollows is only for single hops)
.decl blockFollowsTransitive(id_block_from: Block, id_block_to: Block) 
blockFollowsTransitive(from, to) :- blockFollows(from, to). 
blockFollowsTransitive(from, to) :- blockFollowsTransitive(from, mid), blockFollows(mid, to).

 

// Dominance relation
.decl blockDominates(id_block_top: Block, id_block_bottom: Block)

// blockDominates is blockFollows(top, bottom), !(blockFollows(mid, bottom), !blockDominates(top, mid))
// In order for there not to exist some fact X, build a relation that generates all facts that are X (call relation R). Then
// blockDom :- .....!R(x) 


// block top dominates bottom if bottom follows from top and for all nodes mid, 
// either top dominates mid, or top does not dominates mid and bottom does not follow from mid
// the universal quantifier can be negated as: there exists a node s.t. top does not dominate mid AND bottom follows from mid 
// THe problem is that all variables that appear in the body but not head are quantified existentially 
.decl notDominates(top: Block, bottom: Block)

notDominates(top, bottom) :- notDominates(top, mid), blockFollows(mid, bottom), bottom != top.
// 3, 4 :- 3, * & * , 4
notDominates(top, bottom) :- block(top), block(bottom), top != bottom, !blockFollowsTransitive(top, bottom).
// 3, 4 :- 3 != 4, 
notDominates(top, bottom) :- blockFollows(mid, bottom), blockFollows(mid, top), bottom != top.
// 3, 4 :- *, 4 & *, 3  
//blockDominates(top, bottom) :-  blockFollows(top, bottom), !(blockFollowsTransitive(mid, bottom), !blockDominates(mid, top)).
blockDominates(top, bottom) :- block(top), block(bottom), top != bottom, !notDominates(top, bottom).

// If a block is a guard
//.declare guardSSA(id: SSA)

//guardSSA(id) :- branch(_, _, _, _, _, id), bop(id, id_lhs, id_rhs, op),
 //               (builtinVariable(id_lhs, "SENDER");builtinVariable(id_rhs, "SENDER")), match("SENDER", sender) 


                                        

// Translate the branch into two gotos (makes reachability logic more doable)
/* goto(id_transfer_true, id_block_from, id_block_true), goto(id_transfer_true, id_block_from, id_block_false) :- branch(id_transfer_true,
             id_transfer_false,
             id_block_from,
             id_block_true,
             id_block_false,
             var_cond_id). */
/* 
// A block you jump to via a function call (see 8.sol, e.g. check(z))  
goto(id_transfer, id_block_from, id_block_to) :- 
    jump(id_transfer, id_block_from, id_block_to, id_continuation).

// after returning from the jump you return to the block with id, id_block_continuation
goto(id_transfer_from_to_block, id_block_to, id_block_continuation) :- 
    jump(id_transfer, id_block_from, id_block_to, id_continuation), return(id_transfer_from_to_block, id_block_to).

// Block reachability (under the assumption that blocks can only be reached via jumps or returns)
.decl isReachableFrom(id_block_from: Block, id_block_to: Block) 

isReachableFrom(id_block_from, id_block_to) :- goto(_, id_block_from, id_block_to). 

// Transitive closure of block reachability
isReachableFrom(id_block_from, id_block_to) :- goto(_, id_block_from, id_block_middle), goto(_, id_block_middle, id_block_to). 

// bop with comparisons maybe guards
.decl maybeGuardSSA(id_stmt : SSA, id_lhs: SSA, id_rhs: SSA)


// an SSA whose value is used for branching is a guard condition if its value is dervied from two SSA one of whom must be SENDER 
maybeGuardSSA(id, id_rhs, id_lhs) :- branch(_, _, _, _, _, id), bop(id, id_lhs, id_rhs, op), 
    match("==", op), (builtinVariable(id_lhs, sender);builtinVariable(id_rhs, sender)), match("SENDER", sender) 
 */

//.decl isTainted(x: SSA)


tainted_sinks(id) :- selfdestruct(id, address).//, isTainted(address).

.output tainted_sinks
.output blockDominates
.output blockFollows
.output blockFollowsTransitive
.output notDominates